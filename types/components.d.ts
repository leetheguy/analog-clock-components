/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';

import '@ionic/core';
import 'ionicons';


export namespace Components {

  interface AnalogClock {}
  interface AnalogClockAttributes extends StencilHTMLAttributes {}

  interface ClockFace {
    'hour': number;
    'minute': number;
    'second': number;
  }
  interface ClockFaceAttributes extends StencilHTMLAttributes {
    'hour'?: number;
    'minute'?: number;
    'second'?: number;
  }

  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface TimeZoneSlider {
    'offset': number;
  }
  interface TimeZoneSliderAttributes extends StencilHTMLAttributes {
    'offset'?: number;
    'onTimeZoneChanged'?: (event: CustomEvent) => void;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AnalogClock': Components.AnalogClock;
    'ClockFace': Components.ClockFace;
    'MyComponent': Components.MyComponent;
    'TimeZoneSlider': Components.TimeZoneSlider;
  }

  interface StencilIntrinsicElements {
    'analog-clock': Components.AnalogClockAttributes;
    'clock-face': Components.ClockFaceAttributes;
    'my-component': Components.MyComponentAttributes;
    'time-zone-slider': Components.TimeZoneSliderAttributes;
  }


  interface HTMLAnalogClockElement extends Components.AnalogClock, HTMLStencilElement {}
  var HTMLAnalogClockElement: {
    prototype: HTMLAnalogClockElement;
    new (): HTMLAnalogClockElement;
  };

  interface HTMLClockFaceElement extends Components.ClockFace, HTMLStencilElement {}
  var HTMLClockFaceElement: {
    prototype: HTMLClockFaceElement;
    new (): HTMLClockFaceElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLTimeZoneSliderElement extends Components.TimeZoneSlider, HTMLStencilElement {}
  var HTMLTimeZoneSliderElement: {
    prototype: HTMLTimeZoneSliderElement;
    new (): HTMLTimeZoneSliderElement;
  };

  interface HTMLElementTagNameMap {
    'analog-clock': HTMLAnalogClockElement
    'clock-face': HTMLClockFaceElement
    'my-component': HTMLMyComponentElement
    'time-zone-slider': HTMLTimeZoneSliderElement
  }

  interface ElementTagNameMap {
    'analog-clock': HTMLAnalogClockElement;
    'clock-face': HTMLClockFaceElement;
    'my-component': HTMLMyComponentElement;
    'time-zone-slider': HTMLTimeZoneSliderElement;
  }


}
